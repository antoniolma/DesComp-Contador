# Nao esta no setup, pq nao quero q esses valores sejam modificados
# ao clicar no FPGA_RESET
PRE_SETUP:
LDI R0, $0
STR R0, @10     # Indicador se esta em mais que 12horas (para voltar de AM/PM)
STR R0, @9      # Soma das (APENAS) HORAS
STR R0, @11     # Ciclo: AM ou PM (0 ou 1)
STR R0, @8      # "FlipFlop" pra saber se: 24 horas ou AM/PM
LDI R0, $2
STR R0, @6      # Seta o LIMITE de MEM[DezenasHoras] == 2
LDI R0, $4
STR R0, @7      # Seta o LIMITE de MEM[Horas] == 4
LDI R0, $12
STR R0, @12     # Constante 12

SETUP:
LDI R0, $0		#Carrega o acumulador com o valor 0
STR R0, @511	#" Leitura KEY0
STR R0, @510	#" Leitura KEY1
STR R0, @288	#" HEX0
STR R0, @289	#" HEX1
STR R0, @290	#" HEX2
STR R0, @291	#" HEX3
STR R0, @292	#" HEX4
STR R0, @293	#" HEX5
STR R0, @256	#" LDR0 ~ LDR7
STR R0, @257	#" LDR8
STR R0, @258	#" LDR9
STR R0, @0		#" MEM[0] (unidades)
STR R0, @1		#" MEM[1] (dezenas)
STR R0, @2		#" MEM[2] (centenas)
STR R0, @3		#" MEM[3] (milhares)
STR R0, @4		#" MEM[4] (dezenas de m.)
STR R0, @5		#" MEM[5] (centenas de m.)

# INICIO LOOP PRINCIPAL ----------------------------------------- 
LOOP:
LDR R0, @352    # Verifica KEY0
CEQi R0, $0     # 
JEQ @33         # ....Se não foi pressionado, permanece no loop                     (JEQ) -->
JSR @SEGUNDOS   # ....Se foi pressionado, entra na subrotina de incremento  
LDR R0, @353    # Verifica KEY1                                                     <-- (JEQ)
CEQi R0, $0
JEQ @37         # ....Se nao pressionado, permanece no loop                         (JEQ) -->
JSR @MUDA_HORA  # ....Se foi, entao subrotina para mudar tipo de hora
LDR R0, @356    # Verifica FPGA_RESET                                               <-- (JEQ)
CEQi R0, $0
JEQ @LOOP       # ....Se não foi pressionado, permanece no loop e volta para o inicio
JMP @RESET      # ....Se foi, entao reseta todos os valores e volta pro loop


# ROTINA DE INCREMENTO ------------------------------------------
SEGUNDOS:
STR R0, @511
LDR R0, @0      # Carrega valor das unidades 
ADDi R0, $1     # Soma com constante 1
CEQi R0, $10     # Compara com a constante 10 para verificar o "vai 1"
JEQ @DEZ_SEG    # Se for 10, pula para a casa das dezenas. Senão, atualiza o HEX0 com o próximo valor *************
STR R0, @0      # Armazena valor incrementado
STR R0, @288    # Carrega HEX0 com novo valor   
RET

DEZ_SEG:
LDI R0, $0
STR R0, @0
STR R0, @288    # Carrega HEX0 com 0
LDR R0, @1
ADDi R0, $1     # Soma com constante 1
CEQi R0, $6     # Compara com a constante 10 para verificar o "vai 1"
JEQ @MINUTOS    # Se for 10, pula para a casa das centenas. Senão, atualiza o HEX1 com o próximo valor *************
STR R0, @1      # Armazena valor incrementado
STR R0, @289    # Carrega HEX1 com novo valor  
RET

MINUTOS:
LDI R0, $0
STR R0, @1
STR R0, @289    # Carrega HEX1 com 0
LDR R0, @2
ADDi R0, $1     # Soma com constante 1
CEQi R0, $10     # Compara com a constante 10 para verificar o "vai 1"
JEQ @DEZ_MIN    # Se for 10, pula para a casa das unidades de milhares. Senão, atualiza o HEX2 com o próximo valor *************
STR R0, @2      # Armazena valor incrementado
STR R0, @290    # Carrega HEX2 com novo valor 
RET

DEZ_MIN:
LDI R0, $0
STR R0, @2      
STR R0, @290    # Carrega HEX2 com 0
LDR R0, @3
ADDi R0, $1     # Soma com constante 1
CEQi R0, $6     # Compara com a constante 10 para verificar o "vai 1"
JEQ @HORAS      # Se for 10, pula para a casa das dezenas de milhares. Senão, atualiza o HEX3 com o próximo valor *************
STR R0, @3      # Armazena valor incrementado
STR R0, @291    # Carrega HEX3 com novo valor 
RET

HORAS:
LDI R0, $0
STR R0, @3      
STR R0, @291    # Carrega HEX3 com 0
LDR R0, @9
ADDi R0, $1     # Adiciona 1 na soma das HORAS
STR R0, @9
CLT R0, @12     # Verifica se HORAS menor que 12
JLT @89         # ....Se for, nao precisa indicar que maior q 12horas          (JLT) -->
LDI R0, $1
STR R0, @10     # Indicador para HORAS >= 12 horas
LDR R0, @4      #                                                               <-- (JLT)
ADDi R0, $1     # Soma com constante 1
CEQi R0, $4     # Compara com a constante 10 para verificar o "vai 1"
JEQ @DEZ_HORAS  # Se for 10, pula para a casa das centenas de milhares. Senão, atualiza o HEX4 com o próximo valor *************
STR R0, @4      # Armazena valor incrementado
STR R0, @292    # Carrega HEX4 com novo valor 
RET

DEZ_HORAS:
LDI R0, $0
STR R0, @4
STR R0, @292    # Carrega HEX4 com 0
LDR R0, @5
ADDi R0, $1     # Soma com constante 1
CEQ R0, @6      # Se DEZ_HORAS == Limite: 
JEQ @RESET_2    # ....
STR R0, @5      # Armazena valor incrementado
STR R0, @293    # Carrega HEX5 com novo valor
RET


# ROTINA DE TROCA HORARIO ---------------------------------------
MUDA_HORA: 
LDR R0, @8          # R0 = Indicador se AM/PM
CEQi R0, $0         # Se Indicador = 0:
JEQ @PRE_AMPM_24H   # .... AM/PM ===> 24 horas
#                   # .... 24 horas ===> AM/PM


PRE_24H_AMPM:
LDR R0, @10
CEQi R0, $0    # SOMA_HORAS < 12?
JEQ @24H_AMPM   # ....Se for pula
LDR R0, @5
SUBi R0, $1     # Disp_DEZ_HORA = Disp_DEZ_HORA - 1
STR R0, @5
LDR R0, @4
SUBi R0, $2     # Disp_HORA = Disp_HORA - 2
STR R0, @4
# Nao precisa pular para 24H_AMPM, pq na ROM vai segui um do outro

# VERIFICAR SOBRE O RESET PARA O AMPM

24H_AMPM:
LDI R0, $1
STR R0, @6      # Seta o LIMITE de MEM[DezenasHoras] == 1
STR R0, @8      # Modo: AM/PM
LDI R0, $2
STR R0, @7      # Seta o LIMITE de MEM[Horas] == 2
RET


PRE_AMPM_24H:
LDR R0, @11
CEQi R0, $0    # Ciclo AM?
JEQ @24H_AMPM   # ....Se for pula
LDR R0, @5
ADDi R0, $1     # Disp_DEZ_HORA = Disp_DEZ_HORA + 1
STR R0, @5
LDR R0, @4
ADDi R0, $2     # Disp_HORA = Disp_HORA + 2
STR R0, @4

# Nao precisa pular para AMPM_24H, pq na ROM vai segui um do outro

AMPM_24H:
LDI R0, $2
STR R0, @6      # Seta o LIMITE de MEM[DezenasHoras] == 2
LDI R0, $4
STR R0, @7      # Seta o LIMITE de MEM[Horas] == 4
LDI R0, $0
STR R0, @8      # Modo: 24 Horas
RET


# ROTINA DE RESET -----------------------------------------------
RESET:
#JMP @PRE_SETUP  # Se foi pressionado, entra na subrotina de reset
LDI R0, $1
STR R0, @4		#" MEM[4] (dezenas de m.)
STR R0, @5		#" MEM[5] (centenas de m.)
LDI R0, $11
STR R0, @10

# RESET, porem sem deletar o PRE_SETUP (So limpa valores)
# Utilizado qnd bater o limite do Relogio 12 ou 24 horas
RESET_2:
LDR R0, @11
CEQi R0, $1     # Se Ciclo PM:
JEQ @148        # ....                  (JEQ) -->
LDI R0, $1
STR R0, @11     # Ciclo AM => Ciclo PM
JMP @SETUP      # Zera tudo
LDI R0, $0      #                       <-- (JEQ) 
STR R0, @9      # Zera SOMA_HORAS
LDI R0, $0
STR R0, @11     # Ciclo PM => Ciclo AM
JMP @SETUP      # Zera tudo