# Nao esta no setup, pq nao quero q esses valores sejam modificados
# sem clicar no FPGA_RESET
PRE_SETUP:
LDI R0, $0
STR R0, @9      # Soma das (APENAS) HORAS
STR R0, @8      # MODO: 24 horas ou AM/PM (0 ou 1)
STR R0, @17     # Ciclo: AM ou PM (0 ou 1)
LDI R0, $12
STR R0, @12     # Constante 12
LDI R0, $24
STR R0, @13     # Constante 24
LDI R0, $24
STR R0, @10     # Limite horas
LDI R0, $10
STR R0, @14     # Constante 10
LDI R0, $20
STR R0, @15     # Constante 20
LDI R0, $13
STR R0, @16     # Constante 13

SETUP:
LDI R0, $0		#Carrega o acumulador com o valor 0
STR R0, @511	#" Leitura KEY0
STR R0, @510	#" Leitura KEY1
STR R0, @288	#" HEX0
STR R0, @289	#" HEX1
STR R0, @290	#" HEX2
STR R0, @291	#" HEX3
STR R0, @292	#" HEX4
STR R0, @293	#" HEX5
STR R0, @256	#" LDR0 ~ LDR7
STR R0, @257	#" LDR8
STR R0, @258	#" LDR9
STR R0, @0		#" MEM[0] (unidades)
STR R0, @1		#" MEM[1] (dezenas)
STR R0, @2		#" MEM[2] (centenas)
STR R0, @3		#" MEM[3] (milhares)
STR R0, @4		#" MEM[4] (dezenas de m.)
STR R0, @5		#" MEM[5] (centenas de m.)
LDI R0, $0      

# INICIO LOOP PRINCIPAL ----------------------------------------- 
LOOP:
LDR R0, @352    # Verifica KEY0
CEQi R0, $0     # 
JEQ @39         # ....Se não foi pressionado, permanece no loop                     (A) -->
JSR @SEGUNDOS   # ....Se foi pressionado, entra na subrotina de incremento
LDR R0, @353    # Verifica KEY1                                                     <-- (A)
CEQi R0, $0
JEQ @43         # ....Se nao pressionado, permanece no loop                         (B) -->
JSR @MUDA_HORA  # ....Se foi, entao subrotina para mudar tipo de hora
LDR R0, @356    # Verifica FPGA_RESET                                               <-- (B)
CEQi R0, $0     
JEQ @LOOP       # ....Se não foi pressionado, permanece no loop e volta para o inicio 
JMP @RESET      # ....Se foi, entao reseta todos os valores e volta pro loop

# ROTINA DE INCREMENTO ------------------------------------------
SEGUNDOS:
STR R0, @511
LDR R0, @0      # Carrega valor das unidades 
ADDi R0, $1     # Soma com constante 1
CEQi R0, $10     # Compara com a constante 10 para verificar o "vai 1"
JEQ @DEZ_SEG    # Se for 10, pula para a casa das dezenas. Senão, atualiza o HEX0 com o próximo valor 
STR R0, @0      # Armazena valor incrementado
STR R0, @288    # Carrega HEX0 com novo valor   
RET

DEZ_SEG:
LDI R0, $0
STR R0, @0
STR R0, @288    # Carrega HEX0 com 0
LDR R0, @1
ADDi R0, $1     # Soma com constante 1
CEQi R0, $1     # Compara com a constante 10 para verificar o "vai 1"
JEQ @MINUTOS    # Se for 10, pula para a casa das centenas. Senão, atualiza o HEX1 com o próximo valor 
STR R0, @1      # Armazena valor incrementado
STR R0, @289    # Carrega HEX1 com novo valor  
RET

MINUTOS:
LDI R0, $0
STR R0, @1
STR R0, @289    # Carrega HEX1 com 0
LDR R0, @2
ADDi R0, $1     # Soma com constante 1
CEQi R0, $10     # Compara com a constante 10 para verificar o "vai 1"
JEQ @DEZ_MIN    # Se for 10, pula para a casa das unidades de milhares. Senão, atualiza o HEX2 com o próximo valor 
STR R0, @2      # Armazena valor incrementado
STR R0, @290    # Carrega HEX2 com novo valor 
RET

DEZ_MIN:
LDI R0, $0
STR R0, @2      
STR R0, @290    # Carrega HEX2 com 0
LDR R0, @3
ADDi R0, $1     # Soma com constante 1
CEQi R0, $1     # Compara com a constante 10 para verificar o "vai 1"
JEQ @HORAS      # Se for 10, pula para a casa das dezenas de milhares. Senão, atualiza o HEX3 com o próximo valor 
STR R0, @3      # Armazena valor incrementado
STR R0, @291    # Carrega HEX3 com novo valor 
RET

HORAS:
LDR R0, @9
ADDi R0, $1     # SOMA_HORAS += 1
STR R0, @9
CEQ R0, @10     # SOMA_HORAS == Limite ?
JEQ @RESET_2    # ....Reseta Contagem
LDI R0, $0
STR R0, @3      
STR R0, @291    # Carrega HEX3 com 0
LDR R0, @4
ADDi R0, $1     # Soma com constante 1
CEQi R0, $10    # Compara com a constante 10 para verificar o "vai 1"
JEQ @DEZ_HORAS  # Se for 10, pula para a casa das centenas de milhares. Senão, atualiza o HEX4 com o próximo valor 
STR R0, @4      # Armazena valor incrementado
STR R0, @292    # Carrega HEX4 com novo valor 
RET

DEZ_HORAS:
LDI R0, $0
STR R0, @4
STR R0, @292    # Carrega HEX4 com 0
LDR R0, @5
ADDi R0, $1     # Soma com constante 1
STR R0, @5      # Armazena valor incrementado
STR R0, @293    # Carrega HEX5 com novo valor 
RET


# ROTINA DE TROCA HORARIO ---------------------------------------
MUDA_HORA:
LDR R0, @8      # Verifica modo atual (0 = 24h, 1 = AM/PM)
CEQi R0, $0     # Se era 24 HORAS:
JEQ @SET_AMPM   # ....vai para definir AM/PM
LDI R0, $0
STR R0, @8      # MODO: 24 Horas
LDI R0, $24
STR R0, @10     # limite = 24
LDR R0, @9      # R0 = SOMA_HORAS
CLT R0, @14     # SOMA_HORAS < 10 ?
JLT @LESS10_24H
LDR R0, @9
CLT R0, @15     # SOMA_HORAS < 20 ?
JLT @LESS20_24H
LDI R0, $2
STR R0, @5      # DEZ_HORAS = 2
STR R0, @293    # HEX 5
LDR R0, @9
SUBi R0, $20
STR R0, @4      # HORAS = SOMA_HORAS
STR R0, @292    # HEX 4
RET 

LESS10_24H:
LDI R0, $0
STR R0, @5      # DEZ_HORAS = 0
STR R0, @293    # HEX 5
LDR R0, @9
STR R0, @4      # HORAS = SOMA_HORAS
STR R0, @292    # HEX 4
RET

LESS20_24H:
LDI R0, $1
STR R0, @5      # DEZ_HORAS = 1
STR R0, @293    # HEX 5
LDR R0, @9
SUBi R0, $10
STR R0, @4      # HORAS = SOMA_HORAS
STR R0, @292    # HEX 4
RET

SET_AMPM:
LDI R0, $1
STR R0, @8      # Modo: AM/PM
LDI R0, $12
STR R0, @10     # limite <- 12
LDR R0, @9      # R0 = hora absoluta
CLT R0, @16     # se < 13 (1..12)
JLT @AMPM_RET   # permanece sem ajuste
LDI R0, $1
STR R0, @17     # Ciclo: PM
# (hora >= 13)  -->  subtrai 12 para exibir (1..11)
LDR R0, @9
SUBi R0, $12    # R0 = hora–12
CLT R0, @14     # se < 10
JLT @LESS10_AMPM
# R0 >= 10 (só pode ser 10 ou 11)
LDI R0, $1
STR R0, @5      # DEZ_HORAS = 1
STR R0, @293    # HEX5 <- 1
LDR R0, @9
SUBi R0, $22    # SOMA_HORAS_PM = SOMA_HORAS - 12 (PM) - 10
STR R0, @4      # HORAS = SOMA_HORAS_PM - 10
STR R0, @292    # HEX4 <- SOMA_HORAS_PM - 10
RET

LESS10_AMPM:
LDI R0, $0      # DEZ_HORAS = 0
STR R0, @5
STR R0, @293    # HEX5 <- 0
STR R0, @4      # HORAS = hora
STR R0, @292    # HEX4 <- HORAS
RET

AMPM_RET:
LDI R0, $0
STR R0, @17     # Ciclo: AM
RET

# ROTINA DE RESET -----------------------------------------------
RESET:
JMP @PRE_SETUP  # Se foi pressionado, entra na subrotina de reset

RESET_2:
LDR R0, @17     # Ciclo: AM ou PM
CEQi R0, $1     # Se Ciclo == PM:
JEQ @RESET_PM   # .... Zera soma, troca ciclo e faz setup
LDI R0, $1
STR R0, @17     # ==> Ciclo: PM
JMP @SETUP

RESET_PM:
LDI R0, $0
STR R0, @17     # ==> Ciclo: AM
LDI R0, $0
STR R0, @9      # Soma das (APENAS) HORAS
JMP @SETUP