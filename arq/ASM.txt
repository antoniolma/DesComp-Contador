SETUP:
LDI R7, $1      # R7 = 1 (constante 1)
LDI R0, $0		#Carrega o acumulador com o valor 0
STR R0, @511	#" Leitura KEY0
STR R0, @510	#" Leitura KEY1
STR R0, @509    #" Leitura KEY2
STR R0, @508    #" Leitura KEY3
STR R0, @288	#" HEX0
STR R0, @289	#" HEX1
STR R0, @290	#" HEX2
STR R0, @291	#" HEX3
STR R0, @292	#" HEX4
STR R0, @293	#" HEX5
STR R0, @256	#" LDR0 ~ LDR7
STR R0, @257	#" LDR8
STR R0, @258	#" LDR9
CLT R7, @0      # M[0] < 1?
JLT @18
STR R0, @0		#" MEM[0] (unidades)
CLT R7, @1      # M[1] < 1?
JLT @21
STR R0, @1		#" MEM[1] (dezenas)
CLT R7, @2      # M[2] < 1?
JLT @24
STR R0, @2		#" MEM[2] (centenas)
CLT R7, @3      # M[3] < 1?
JLT @27
STR R0, @3		#" MEM[3] (milhares)
CLT R7, @4      # M[4] < 1?
JLT @30
STR R0, @4		#" MEM[4] (dezenas de m.)
CLT R7, @5      # M[5] < 1?
JLT @33
STR R0, @5		#" MEM[5] (centenas de m.)
CLT R7, @9      # M[9] < 1?
JLT @36
STR R0, @9      # Contagem total
LDI R0, $24
STR R0, @10     # Limite horas

# INICIO LOOP PRINCIPAL ----------------------------------------- 
LOOP:
LDR R0, @352    # Verifica KEY0
CEQi R0, $0     # 
JEQ 42         # ....Se não foi pressionado, permanece no loop                     (A) -->
JSR @SEGUNDOS   # ....Se foi pressionado, entra na subrotina de incremento
LDR R1, @354    # Verifica KEY2                                                     <-- (A)
CEQi R1, $0
JEQ @46         # ....Se não foi pressionado, permanece no loop                     (C) -->
JSR @MINUTOS    # ....Se foi pressionado, entra na subrotina de incremento dos minutos
LDR R2, @355    # Verifica KEY3                                                     <-- (C) 
CEQi R2, $0
JEQ @50         # ....Se não foi pressionado, permanece no loop                     (B) -->
JSR @HORAS      # ....Se foi pressionado, entra na subrotina de incremento das horas
LDR R3, @356    # Verifica FPGA_RESET                                               <-- (B)
CEQi R3, $0     
JEQ @LOOP       # ....Se não foi pressionado, permanece no loop e volta para o inicio 
JMP @RESET      # ....Se foi, entao reseta todos os valores e volta pro loop


# ROTINA DE INCREMENTO ------------------------------------------
SEGUNDOS:
STR R0, @511
LDR R0, @0      # Carrega valor das unidades 
ADDi R0, $1     # Soma com constante 1
CEQi R0, $10     # Compara com a constante 10 para verificar o "vai 1"
JEQ @DEZ_SEG    # Se for 10, pula para a casa das dezenas. Senão, atualiza o HEX0 com o próximo valor 
STR R0, @0      # Armazena valor incrementado
STR R0, @288    # Carrega HEX0 com novo valor   
RET

DEZ_SEG:
LDI R0, $0
STR R0, @0
STR R0, @288    # Carrega HEX0 com 0
LDR R0, @1
ADDi R0, $1     # Soma com constante 1
CEQi R0, $6     # Compara com a constante 6 para verificar o "vai 1"
JEQ @PRE_MINUTOS# Se for 10, pula para a casa das centenas. Senão, atualiza o HEX1 com o próximo valor 
STR R0, @1      # Armazena valor incrementado
STR R0, @289    # Carrega HEX1 com novo valor  
RET

PRE_MINUTOS:
LDR R1, @1
SUBi R1, $5
STR R1, @1
STR R1, @289    # Carrega HEX1 com 0

MINUTOS:
STR R1, @509
LDR R1, @2
ADDi R1, $1     # Soma com constante 1
CEQi R1, $10    # Compara com a constante 10 para verificar o "vai 1"
JEQ @DEZ_MIN    # Se for 10, pula para a casa das unidades de milhares. Senão, atualiza o HEX2 com o próximo valor 
STR R1, @2      # Armazena valor incrementado
STR R1, @290    # Carrega HEX2 com novo valor 
RET

DEZ_MIN:
LDI R1, $0
STR R1, @2      
STR R1, @290    # Carrega HEX2 com 0
LDR R1, @3
ADDi R1, $1     # Soma com constante 1
CEQi R1, $6     # Compara com a constante 6 para verificar o "vai 1"
JEQ @PRE_HORAS  # Se for 10, pula para a casa das dezenas de milhares. Senão, atualiza o HEX3 com o próximo valor 
STR R1, @3      # Armazena valor incrementado
STR R1, @291    # Carrega HEX3 com novo valor 
RET

PRE_HORAS:
LDR R2, @3
SUBi R2, $5
STR R2, @3
STR R2, @291    # Carrega HEX3 com 0

HORAS:
STR R2, @508
LDR R2, @9
ADDi R2, $1     # SOMA_HORAS += 1
STR R2, @9
CEQ R2, @10     # SOMA_HORAS == Limite ?
JEQ @RESET_2    # ....Reseta Contagem
LDR R2, @4
ADDi R2, $1     # Soma com constante 1
CEQi R2, $10    # Compara com a constante 10 para verificar o "vai 1"
JEQ @DEZ_HORAS  # Se for 10, pula para a casa das centenas de milhares. Senão, atualiza o HEX4 com o próximo valor 
STR R2, @4      # Armazena valor incrementado
STR R2, @292    # Carrega HEX4 com novo valor 
RET

DEZ_HORAS:
LDI R2, $0
STR R2, @4
STR R2, @292    # Carrega HEX4 com 0
LDR R2, @5
ADDi R2, $1     # Soma com constante 1
STR R2, @5      # Armazena valor incrementado
STR R2, @293    # Carrega HEX5 com novo valor 
RET


# ROTINA DE RESET -----------------------------------------------
RESET:
JMP @SETUP      # Se foi pressionado, entra na subrotina de reset

RESET_2:
LDI R0, $0
STR R0, @9      # ZERA Contagem total
STR R0, @4		# ZERA MEM[4] (dezenas de m.)
STR R0, @5		# ZERA MEM[5] (centenas de m.)
STR R0, @292	# ZERA HEX4
STR R0, @293	# ZERA HEX5
JMP @LOOP