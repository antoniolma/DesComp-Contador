tmp(0) := "00100" & "000" & '0' & x"00";	-- LDI R0, $0
tmp(1) := "00101" & "000" & '0' & x"09";	-- STR R0, @9      # Soma das (APENAS) HORAS
tmp(2) := "00101" & "000" & '0' & x"08";	-- STR R0, @8      # MODO: 24 horas ou AM/PM (0 ou 1)
tmp(3) := "00100" & "000" & '0' & x"02";	-- LDI R0, $2
tmp(4) := "00101" & "000" & '0' & x"06";	-- STR R0, @6      # LIMITE de MEM[DezenasHoras] == 2
tmp(5) := "00100" & "000" & '0' & x"04";	-- LDI R0, $4
tmp(6) := "00101" & "000" & '0' & x"07";	-- STR R0, @7      # LIMITE de MEM[DezHoras] == 4
tmp(7) := "00100" & "000" & '0' & x"0C";	-- LDI R0, $12
tmp(8) := "00101" & "000" & '0' & x"0C";	-- STR R0, @12     # Constante 12
tmp(9) := "00100" & "000" & '0' & x"18";	-- LDI R0, $24
tmp(10) := "00101" & "000" & '0' & x"0A";	-- STR R0, @10     # Limite horas
tmp(11) := "00100" & "000" & '0' & x"00";	-- LDI R0, $0		#Carrega o acumulador com o valor 0
tmp(12) := "00101" & "000" & '1' & x"FF";	-- STR R0, @511	#" Leitura KEY0
tmp(13) := "00101" & "000" & '1' & x"FE";	-- STR R0, @510	#" Leitura KEY1
tmp(14) := "00101" & "000" & '1' & x"20";	-- STR R0, @288	#" HEX0
tmp(15) := "00101" & "000" & '1' & x"21";	-- STR R0, @289	#" HEX1
tmp(16) := "00101" & "000" & '1' & x"22";	-- STR R0, @290	#" HEX2
tmp(17) := "00101" & "000" & '1' & x"23";	-- STR R0, @291	#" HEX3
tmp(18) := "00101" & "000" & '1' & x"24";	-- STR R0, @292	#" HEX4
tmp(19) := "00101" & "000" & '1' & x"25";	-- STR R0, @293	#" HEX5
tmp(20) := "00101" & "000" & '1' & x"00";	-- STR R0, @256	#" LDR0 ~ LDR7
tmp(21) := "00101" & "000" & '1' & x"01";	-- STR R0, @257	#" LDR8
tmp(22) := "00101" & "000" & '1' & x"02";	-- STR R0, @258	#" LDR9
tmp(23) := "00101" & "000" & '0' & x"00";	-- STR R0, @0		#" MEM[0] (unidades)
tmp(24) := "00101" & "000" & '0' & x"01";	-- STR R0, @1		#" MEM[1] (dezenas)
tmp(25) := "00101" & "000" & '0' & x"02";	-- STR R0, @2		#" MEM[2] (centenas)
tmp(26) := "00101" & "000" & '0' & x"03";	-- STR R0, @3		#" MEM[3] (milhares)
tmp(27) := "00101" & "000" & '0' & x"04";	-- STR R0, @4		#" MEM[4] (dezenas de m.)
tmp(28) := "00101" & "000" & '0' & x"05";	-- STR R0, @5		#" MEM[5] (centenas de m.)
tmp(29) := "00100" & "000" & '0' & x"00";	-- LDI R0, $0      
tmp(30) := "00001" & "000" & '1' & x"60";	-- LDR R0, @352    # Verifica KEY0
tmp(31) := "10001" & "000" & '0' & x"00";	-- CEQi R0, $0     # 
tmp(32) := "00111" & "000" & '0' & x"22";	-- JEQ @34         # ....Se não foi pressionado, permanece no loop                    
tmp(33) := "01001" & "000" & '0' & x"26";	-- JSR @SEGUNDOS   # ....Se foi pressionado, entra na subrotina de incremento  
tmp(34) := "00001" & "000" & '1' & x"64";	-- LDR R0, @356    # Verifica FPGA_RESET 
tmp(35) := "10001" & "000" & '0' & x"00";	-- CEQi R0, $0     
tmp(36) := "00111" & "000" & '0' & x"1E";	-- JEQ @LOOP       # ....Se não foi pressionado, permanece no loop e volta para o inicio 
tmp(37) := "00110" & "000" & '0' & x"63";	-- JMP @RESET      # ....Se foi, entao reseta todos os valores e volta pro loop
tmp(38) := "00101" & "000" & '1' & x"FF";	-- STR R0, @511
tmp(39) := "00001" & "000" & '0' & x"00";	-- LDR R0, @0      # Carrega valor das unidades 
tmp(40) := "01011" & "000" & '0' & x"01";	-- ADDi R0, $1     # Soma com constante 1
tmp(41) := "10001" & "000" & '0' & x"0A";	-- CEQi R0, $10     # Compara com a constante 10 para verificar o "vai 1"
tmp(42) := "00111" & "000" & '0' & x"2E";	-- JEQ @DEZ_SEG    # Se for 10, pula para a casa das dezenas. Senão, atualiza o HEX0 com o próximo valor 
tmp(43) := "00101" & "000" & '0' & x"00";	-- STR R0, @0      # Armazena valor incrementado
tmp(44) := "00101" & "000" & '1' & x"20";	-- STR R0, @288    # Carrega HEX0 com novo valor   
tmp(45) := "01010" & "000" & '0' & x"00";	-- RET
tmp(46) := "00100" & "000" & '0' & x"00";	-- LDI R0, $0
tmp(47) := "00101" & "000" & '0' & x"00";	-- STR R0, @0
tmp(48) := "00101" & "000" & '1' & x"20";	-- STR R0, @288    # Carrega HEX0 com 0
tmp(49) := "00001" & "000" & '0' & x"01";	-- LDR R0, @1
tmp(50) := "01011" & "000" & '0' & x"01";	-- ADDi R0, $1     # Soma com constante 1
tmp(51) := "10001" & "000" & '0' & x"01";	-- CEQi R0, $1     # Compara com a constante 10 para verificar o "vai 1"
tmp(52) := "00111" & "000" & '0' & x"38";	-- JEQ @MINUTOS    # Se for 10, pula para a casa das centenas. Senão, atualiza o HEX1 com o próximo valor 
tmp(53) := "00101" & "000" & '0' & x"01";	-- STR R0, @1      # Armazena valor incrementado
tmp(54) := "00101" & "000" & '1' & x"21";	-- STR R0, @289    # Carrega HEX1 com novo valor  
tmp(55) := "01010" & "000" & '0' & x"00";	-- RET
tmp(56) := "00100" & "000" & '0' & x"00";	-- LDI R0, $0
tmp(57) := "00101" & "000" & '0' & x"01";	-- STR R0, @1
tmp(58) := "00101" & "000" & '1' & x"21";	-- STR R0, @289    # Carrega HEX1 com 0
tmp(59) := "00001" & "000" & '0' & x"02";	-- LDR R0, @2
tmp(60) := "01011" & "000" & '0' & x"01";	-- ADDi R0, $1     # Soma com constante 1
tmp(61) := "10001" & "000" & '0' & x"0A";	-- CEQi R0, $10     # Compara com a constante 10 para verificar o "vai 1"
tmp(62) := "00111" & "000" & '0' & x"42";	-- JEQ @DEZ_MIN    # Se for 10, pula para a casa das unidades de milhares. Senão, atualiza o HEX2 com o próximo valor 
tmp(63) := "00101" & "000" & '0' & x"02";	-- STR R0, @2      # Armazena valor incrementado
tmp(64) := "00101" & "000" & '1' & x"22";	-- STR R0, @290    # Carrega HEX2 com novo valor 
tmp(65) := "01010" & "000" & '0' & x"00";	-- RET
tmp(66) := "00100" & "000" & '0' & x"00";	-- LDI R0, $0
tmp(67) := "00101" & "000" & '0' & x"02";	-- STR R0, @2      
tmp(68) := "00101" & "000" & '1' & x"22";	-- STR R0, @290    # Carrega HEX2 com 0
tmp(69) := "00001" & "000" & '0' & x"03";	-- LDR R0, @3
tmp(70) := "01011" & "000" & '0' & x"01";	-- ADDi R0, $1     # Soma com constante 1
tmp(71) := "10001" & "000" & '0' & x"01";	-- CEQi R0, $1     # Compara com a constante 10 para verificar o "vai 1"
tmp(72) := "00111" & "000" & '0' & x"4C";	-- JEQ @HORAS      # Se for 10, pula para a casa das dezenas de milhares. Senão, atualiza o HEX3 com o próximo valor 
tmp(73) := "00101" & "000" & '0' & x"03";	-- STR R0, @3      # Armazena valor incrementado
tmp(74) := "00101" & "000" & '1' & x"23";	-- STR R0, @291    # Carrega HEX3 com novo valor 
tmp(75) := "01010" & "000" & '0' & x"00";	-- RET
tmp(76) := "00001" & "000" & '0' & x"09";	-- LDR R0, @9
tmp(77) := "01011" & "000" & '0' & x"01";	-- ADDi R0, $1     # SOMA_HORAS += 1
tmp(78) := "00101" & "000" & '0' & x"09";	-- STR R0, @9
tmp(79) := "01000" & "000" & '0' & x"0A";	-- CEQ R0, @10     # SOMA_HORAS == Limite ?
tmp(80) := "00111" & "000" & '0' & x"64";	-- JEQ @RESET_2    # ....Reseta Contagem
tmp(81) := "00100" & "000" & '0' & x"00";	-- LDI R0, $0
tmp(82) := "00101" & "000" & '0' & x"03";	-- STR R0, @3      
tmp(83) := "00101" & "000" & '1' & x"23";	-- STR R0, @291    # Carrega HEX3 com 0
tmp(84) := "00001" & "000" & '0' & x"04";	-- LDR R0, @4
tmp(85) := "01011" & "000" & '0' & x"01";	-- ADDi R0, $1     # Soma com constante 1
tmp(86) := "10001" & "000" & '0' & x"0A";	-- CEQi R0, $10    # Compara com a constante 10 para verificar o "vai 1"
tmp(87) := "00111" & "000" & '0' & x"5B";	-- JEQ @DEZ_HORAS  # Se for 10, pula para a casa das centenas de milhares. Senão, atualiza o HEX4 com o próximo valor 
tmp(88) := "00101" & "000" & '0' & x"04";	-- STR R0, @4      # Armazena valor incrementado
tmp(89) := "00101" & "000" & '1' & x"24";	-- STR R0, @292    # Carrega HEX4 com novo valor 
tmp(90) := "01010" & "000" & '0' & x"00";	-- RET
tmp(91) := "00100" & "000" & '0' & x"00";	-- LDI R0, $0
tmp(92) := "00101" & "000" & '0' & x"04";	-- STR R0, @4
tmp(93) := "00101" & "000" & '1' & x"24";	-- STR R0, @292    # Carrega HEX4 com 0
tmp(94) := "00001" & "000" & '0' & x"05";	-- LDR R0, @5
tmp(95) := "01011" & "000" & '0' & x"01";	-- ADDi R0, $1     # Soma com constante 1
tmp(96) := "00101" & "000" & '0' & x"05";	-- STR R0, @5      # Armazena valor incrementado
tmp(97) := "00101" & "000" & '1' & x"25";	-- STR R0, @293    # Carrega HEX5 com novo valor 
tmp(98) := "01010" & "000" & '0' & x"00";	-- RET
tmp(99) := "00110" & "000" & '0' & x"00";	-- JMP @PRE_SETUP  # Se foi pressionado, entra na subrotina de reset
tmp(100) := "00100" & "000" & '0' & x"00";	-- LDI R0, $0
tmp(101) := "00101" & "000" & '0' & x"09";	-- STR R0, @9      # Soma das (APENAS) HORAS
tmp(102) := "00110" & "000" & '0' & x"0B";	-- JMP @SETUP
