tmp(0) := "00100" & "000" & '0' & x"00";	-- LDI R0, $0
tmp(1) := "00101" & "000" & '0' & x"09";	-- STR R0, @9      # Soma das (APENAS) HORAS
tmp(2) := "00101" & "000" & '0' & x"08";	-- STR R0, @8      # MODO: 24 horas ou AM/PM (0 ou 1)
tmp(3) := "00100" & "000" & '0' & x"02";	-- LDI R0, $2
tmp(4) := "00101" & "000" & '0' & x"06";	-- STR R0, @6      # LIMITE de MEM[DezenasHoras] == 2
tmp(5) := "00100" & "000" & '0' & x"04";	-- LDI R0, $4
tmp(6) := "00101" & "000" & '0' & x"07";	-- STR R0, @7      # LIMITE de MEM[DezHoras] == 4
tmp(7) := "00100" & "000" & '0' & x"0C";	-- LDI R0, $12
tmp(8) := "00101" & "000" & '0' & x"0C";	-- STR R0, @12     # Constante 12
tmp(9) := "00100" & "000" & '0' & x"18";	-- LDI R0, $24
tmp(10) := "00101" & "000" & '0' & x"0A";	-- STR R0, @10     # Limite horas
tmp(11) := "00100" & "000" & '0' & x"00";	-- LDI R0, $0		#Carrega o acumulador com o valor 0
tmp(12) := "00101" & "000" & '1' & x"FF";	-- STR R0, @511	#" Leitura KEY0
tmp(13) := "00101" & "000" & '1' & x"FE";	-- STR R0, @510	#" Leitura KEY1
tmp(14) := "00101" & "000" & '1' & x"20";	-- STR R0, @288	#" HEX0
tmp(15) := "00101" & "000" & '1' & x"21";	-- STR R0, @289	#" HEX1
tmp(16) := "00101" & "000" & '1' & x"22";	-- STR R0, @290	#" HEX2
tmp(17) := "00101" & "000" & '1' & x"23";	-- STR R0, @291	#" HEX3
tmp(18) := "00101" & "000" & '1' & x"24";	-- STR R0, @292	#" HEX4
tmp(19) := "00101" & "000" & '1' & x"25";	-- STR R0, @293	#" HEX5
tmp(20) := "00101" & "000" & '1' & x"00";	-- STR R0, @256	#" LDR0 ~ LDR7
tmp(21) := "00101" & "000" & '1' & x"01";	-- STR R0, @257	#" LDR8
tmp(22) := "00101" & "000" & '1' & x"02";	-- STR R0, @258	#" LDR9
tmp(23) := "00101" & "000" & '0' & x"00";	-- STR R0, @0		#" MEM[0] (unidades)
tmp(24) := "00101" & "000" & '0' & x"01";	-- STR R0, @1		#" MEM[1] (dezenas)
tmp(25) := "00101" & "000" & '0' & x"02";	-- STR R0, @2		#" MEM[2] (centenas)
tmp(26) := "00101" & "000" & '0' & x"03";	-- STR R0, @3		#" MEM[3] (milhares)
tmp(27) := "00101" & "000" & '0' & x"04";	-- STR R0, @4		#" MEM[4] (dezenas de m.)
tmp(28) := "00101" & "000" & '0' & x"05";	-- STR R0, @5		#" MEM[5] (centenas de m.)
tmp(29) := "00100" & "000" & '0' & x"00";	-- LDI R0, $0      
tmp(30) := "00001" & "000" & '1' & x"60";	-- LDR R0, @352    # Verifica KEY0
tmp(31) := "10001" & "000" & '0' & x"00";	-- CEQi R0, $0     # 
tmp(32) := "00111" & "000" & '0' & x"22";	-- JEQ @34         # ....Se não foi pressionado, permanece no loop                     (A) -->
tmp(33) := "01001" & "000" & '0' & x"2A";	-- JSR @SEGUNDOS   # ....Se foi pressionado, entra na subrotina de incremento
tmp(34) := "00001" & "000" & '1' & x"61";	-- LDR R0, @353    # Verifica KEY1                                                     <-- (A)
tmp(35) := "10001" & "000" & '0' & x"00";	-- CEQi R0, $0
tmp(36) := "00111" & "000" & '0' & x"26";	-- JEQ @38         # ....Se nao pressionado, permanece no loop                         (B) -->
tmp(37) := "01001" & "000" & '0' & x"67";	-- JSR @MUDA_HORA  # ....Se foi, entao subrotina para mudar tipo de hora
tmp(38) := "00001" & "000" & '1' & x"64";	-- LDR R0, @356    # Verifica FPGA_RESET                                               <-- (B)
tmp(39) := "10001" & "000" & '0' & x"00";	-- CEQi R0, $0     
tmp(40) := "00111" & "000" & '0' & x"1E";	-- JEQ @LOOP       # ....Se não foi pressionado, permanece no loop e volta para o inicio 
tmp(41) := "00110" & "000" & '0' & x"87";	-- JMP @RESET      # ....Se foi, entao reseta todos os valores e volta pro loop
tmp(42) := "00101" & "000" & '1' & x"FF";	-- STR R0, @511
tmp(43) := "00001" & "000" & '0' & x"00";	-- LDR R0, @0      # Carrega valor das unidades 
tmp(44) := "01011" & "000" & '0' & x"01";	-- ADDi R0, $1     # Soma com constante 1
tmp(45) := "10001" & "000" & '0' & x"0A";	-- CEQi R0, $10     # Compara com a constante 10 para verificar o "vai 1"
tmp(46) := "00111" & "000" & '0' & x"32";	-- JEQ @DEZ_SEG    # Se for 10, pula para a casa das dezenas. Senão, atualiza o HEX0 com o próximo valor 
tmp(47) := "00101" & "000" & '0' & x"00";	-- STR R0, @0      # Armazena valor incrementado
tmp(48) := "00101" & "000" & '1' & x"20";	-- STR R0, @288    # Carrega HEX0 com novo valor   
tmp(49) := "01010" & "000" & '0' & x"00";	-- RET
tmp(50) := "00100" & "000" & '0' & x"00";	-- LDI R0, $0
tmp(51) := "00101" & "000" & '0' & x"00";	-- STR R0, @0
tmp(52) := "00101" & "000" & '1' & x"20";	-- STR R0, @288    # Carrega HEX0 com 0
tmp(53) := "00001" & "000" & '0' & x"01";	-- LDR R0, @1
tmp(54) := "01011" & "000" & '0' & x"01";	-- ADDi R0, $1     # Soma com constante 1
tmp(55) := "10001" & "000" & '0' & x"01";	-- CEQi R0, $1     # Compara com a constante 10 para verificar o "vai 1"
tmp(56) := "00111" & "000" & '0' & x"3C";	-- JEQ @MINUTOS    # Se for 10, pula para a casa das centenas. Senão, atualiza o HEX1 com o próximo valor 
tmp(57) := "00101" & "000" & '0' & x"01";	-- STR R0, @1      # Armazena valor incrementado
tmp(58) := "00101" & "000" & '1' & x"21";	-- STR R0, @289    # Carrega HEX1 com novo valor  
tmp(59) := "01010" & "000" & '0' & x"00";	-- RET
tmp(60) := "00100" & "000" & '0' & x"00";	-- LDI R0, $0
tmp(61) := "00101" & "000" & '0' & x"01";	-- STR R0, @1
tmp(62) := "00101" & "000" & '1' & x"21";	-- STR R0, @289    # Carrega HEX1 com 0
tmp(63) := "00001" & "000" & '0' & x"02";	-- LDR R0, @2
tmp(64) := "01011" & "000" & '0' & x"01";	-- ADDi R0, $1     # Soma com constante 1
tmp(65) := "10001" & "000" & '0' & x"0A";	-- CEQi R0, $10     # Compara com a constante 10 para verificar o "vai 1"
tmp(66) := "00111" & "000" & '0' & x"46";	-- JEQ @DEZ_MIN    # Se for 10, pula para a casa das unidades de milhares. Senão, atualiza o HEX2 com o próximo valor 
tmp(67) := "00101" & "000" & '0' & x"02";	-- STR R0, @2      # Armazena valor incrementado
tmp(68) := "00101" & "000" & '1' & x"22";	-- STR R0, @290    # Carrega HEX2 com novo valor 
tmp(69) := "01010" & "000" & '0' & x"00";	-- RET
tmp(70) := "00100" & "000" & '0' & x"00";	-- LDI R0, $0
tmp(71) := "00101" & "000" & '0' & x"02";	-- STR R0, @2      
tmp(72) := "00101" & "000" & '1' & x"22";	-- STR R0, @290    # Carrega HEX2 com 0
tmp(73) := "00001" & "000" & '0' & x"03";	-- LDR R0, @3
tmp(74) := "01011" & "000" & '0' & x"01";	-- ADDi R0, $1     # Soma com constante 1
tmp(75) := "10001" & "000" & '0' & x"01";	-- CEQi R0, $1     # Compara com a constante 10 para verificar o "vai 1"
tmp(76) := "00111" & "000" & '0' & x"50";	-- JEQ @HORAS      # Se for 10, pula para a casa das dezenas de milhares. Senão, atualiza o HEX3 com o próximo valor 
tmp(77) := "00101" & "000" & '0' & x"03";	-- STR R0, @3      # Armazena valor incrementado
tmp(78) := "00101" & "000" & '1' & x"23";	-- STR R0, @291    # Carrega HEX3 com novo valor 
tmp(79) := "01010" & "000" & '0' & x"00";	-- RET
tmp(80) := "00001" & "000" & '0' & x"09";	-- LDR R0, @9
tmp(81) := "01011" & "000" & '0' & x"01";	-- ADDi R0, $1     # SOMA_HORAS += 1
tmp(82) := "00101" & "000" & '0' & x"09";	-- STR R0, @9
tmp(83) := "01000" & "000" & '0' & x"0A";	-- CEQ R0, @10     # SOMA_HORAS == Limite ?
tmp(84) := "00111" & "000" & '0' & x"88";	-- JEQ @RESET_2    # ....Reseta Contagem
tmp(85) := "00100" & "000" & '0' & x"00";	-- LDI R0, $0
tmp(86) := "00101" & "000" & '0' & x"03";	-- STR R0, @3      
tmp(87) := "00101" & "000" & '1' & x"23";	-- STR R0, @291    # Carrega HEX3 com 0
tmp(88) := "00001" & "000" & '0' & x"04";	-- LDR R0, @4
tmp(89) := "01011" & "000" & '0' & x"01";	-- ADDi R0, $1     # Soma com constante 1
tmp(90) := "10001" & "000" & '0' & x"0A";	-- CEQi R0, $10    # Compara com a constante 10 para verificar o "vai 1"
tmp(91) := "00111" & "000" & '0' & x"5F";	-- JEQ @DEZ_HORAS  # Se for 10, pula para a casa das centenas de milhares. Senão, atualiza o HEX4 com o próximo valor 
tmp(92) := "00101" & "000" & '0' & x"04";	-- STR R0, @4      # Armazena valor incrementado
tmp(93) := "00101" & "000" & '1' & x"24";	-- STR R0, @292    # Carrega HEX4 com novo valor 
tmp(94) := "01010" & "000" & '0' & x"00";	-- RET
tmp(95) := "00100" & "000" & '0' & x"00";	-- LDI R0, $0
tmp(96) := "00101" & "000" & '0' & x"04";	-- STR R0, @4
tmp(97) := "00101" & "000" & '1' & x"24";	-- STR R0, @292    # Carrega HEX4 com 0
tmp(98) := "00001" & "000" & '0' & x"05";	-- LDR R0, @5
tmp(99) := "01011" & "000" & '0' & x"01";	-- ADDi R0, $1     # Soma com constante 1
tmp(100) := "00101" & "000" & '0' & x"05";	-- STR R0, @5      # Armazena valor incrementado
tmp(101) := "00101" & "000" & '1' & x"25";	-- STR R0, @293    # Carrega HEX5 com novo valor 
tmp(102) := "01010" & "000" & '0' & x"00";	-- RET
tmp(103) := "00001" & "000" & '0' & x"08";	-- LDR R0, @8         # Verifica modo atual (0 = 24h, 1 = AM/PM)
tmp(104) := "10001" & "000" & '0' & x"00";	-- CEQi R0, $0
tmp(105) := "00111" & "000" & '0' & x"6F";	-- JEQ @SET_AMPM      # se era 0, vai para definir AM/PM
tmp(106) := "00100" & "000" & '0' & x"00";	-- LDI R0, $0
tmp(107) := "00101" & "000" & '0' & x"08";	-- STR R0, @8         # MODO: 24 Horas
tmp(108) := "00100" & "000" & '0' & x"18";	-- LDI R0, $24
tmp(109) := "00101" & "000" & '0' & x"0A";	-- STR R0, @10        # limite = 24
tmp(110) := "01010" & "000" & '0' & x"00";	-- RET 
tmp(111) := "00100" & "000" & '0' & x"01";	-- LDI R0, $1
tmp(112) := "00101" & "000" & '0' & x"08";	-- STR R0, @8        # MODO: AM/PM
tmp(113) := "00100" & "000" & '0' & x"0C";	-- LDI R0, $12
tmp(114) := "00101" & "000" & '0' & x"0A";	-- STR R0, @10       # limite = 12
tmp(115) := "00001" & "001" & '0' & x"09";	-- LDR R1, @9        # R1 = SOMA_HORAS
tmp(116) := "01111" & "001" & '0' & x"0D";	-- CLT R1, $13       # SOMA_HORAS < 13?
tmp(117) := "10000" & "000" & '0' & x"86";	-- JLT @AMPM_RET     # ....não corrige
tmp(118) := "01110" & "001" & '0' & x"0C";	-- SUBi R1, $12       # R1 = horas_brutas - 12 (1..11)
tmp(119) := "01111" & "001" & '0' & x"0A";	-- CLT R1, $10       # R1 < 10?
tmp(120) := "10000" & "000" & '0' & x"80";	-- JLT @LESS10
tmp(121) := "00100" & "010" & '0' & x"01";	-- LDI R2, $1
tmp(122) := "00101" & "010" & '0' & x"05";	-- STR R2, @5        # dezena = 1
tmp(123) := "00101" & "010" & '1' & x"25";	-- STR R2, @293      # HEX5 = 1
tmp(124) := "01110" & "001" & '0' & x"0A";	-- SUBi R1, $10       # unidade = R1 - 10
tmp(125) := "00101" & "001" & '0' & x"04";	-- STR R1, @4
tmp(126) := "00101" & "001" & '1' & x"24";	-- STR R1, @292      # HEX4 = unidade
tmp(127) := "01010" & "000" & '0' & x"00";	-- RET
tmp(128) := "00100" & "010" & '0' & x"00";	-- LDI R2, $0
tmp(129) := "00101" & "010" & '0' & x"05";	-- STR R2, @5        # dezena = 0
tmp(130) := "00101" & "010" & '1' & x"25";	-- STR R2, @293      # HEX5 = 0
tmp(131) := "00101" & "001" & '0' & x"04";	-- STR R1, @4        # unidade = R1
tmp(132) := "00101" & "001" & '1' & x"24";	-- STR R1, @292      # HEX4 = R1
tmp(133) := "01010" & "000" & '0' & x"00";	-- RET
tmp(134) := "01010" & "000" & '0' & x"00";	-- RET
tmp(135) := "00110" & "000" & '0' & x"00";	-- JMP @PRE_SETUP  # Se foi pressionado, entra na subrotina de reset
tmp(136) := "00100" & "000" & '0' & x"00";	-- LDI R0, $0
tmp(137) := "00101" & "000" & '0' & x"09";	-- STR R0, @9      # Soma das (APENAS) HORAS
tmp(138) := "00110" & "000" & '0' & x"0B";	-- JMP @SETUP
