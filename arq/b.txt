# Nao esta no setup, pq nao quero q esses valores sejam modificados
# sem clicar no FPGA_RESET
PRE_SETUP:
LDI R0, $0
STR R0, @9      # Soma das (APENAS) HORAS
STR R0, @8      # MODO: 24 horas ou AM/PM (0 ou 1)
LDI R0, $2
STR R0, @6      # LIMITE de MEM[DezenasHoras] == 2
LDI R0, $4
STR R0, @7      # LIMITE de MEM[DezHoras] == 4
LDI R0, $12
STR R0, @12     # Constante 12
LDI R0, $23
STR R0, @10     # Limite horas

SETUP:
LDI R0, $0		#Carrega o acumulador com o valor 0
STR R0, @511	#" Leitura KEY0
STR R0, @510	#" Leitura KEY1
STR R0, @288	#" HEX0
STR R0, @289	#" HEX1
STR R0, @290	#" HEX2
STR R0, @291	#" HEX3
STR R0, @292	#" HEX4
STR R0, @293	#" HEX5
STR R0, @256	#" LDR0 ~ LDR7
STR R0, @257	#" LDR8
STR R0, @258	#" LDR9
STR R0, @0		#" MEM[0] (unidades)
STR R0, @1		#" MEM[1] (dezenas)
STR R0, @2		#" MEM[2] (centenas)
STR R0, @3		#" MEM[3] (milhares)
STR R0, @4		#" MEM[4] (dezenas de m.)
STR R0, @5		#" MEM[5] (centenas de m.)
STR R0, @11     # Ciclo: AM ou PM (0 ou 1)
STR R0, @22     # TMP: auxiliar para ATUALIZA_DISP


# INICIO LOOP PRINCIPAL ----------------------------------------- 
LOOP:
LDR R0, @352    # Verifica KEY0
CEQi R0, $0     # 
JEQ @35         # ....Se n찾o foi pressionado, permanece no loop                     (A) -->
JSR @SEGUNDOS   # ....Se foi pressionado, entra na subrotina de incremento
LDR R0, @353    # Verifica KEY1                                                     <-- (A)
CEQi R0, $0
JEQ @39         # ....Se nao pressionado, permanece no loop                         (B) -->
JSR @MUDA_HORA  # ....Se foi, entao subrotina para mudar tipo de hora
LDR R0, @356    # Verifica FPGA_RESET                                               <-- (B)
CEQi R0, $0     
JEQ @LOOP       # ....Se n찾o foi pressionado, permanece no loop e volta para o inicio 
JMP @RESET      # ....Se foi, entao reseta todos os valores e volta pro loop


# ROTINA DE INCREMENTO ------------------------------------------
SEGUNDOS:
STR R0, @511
LDR R0, @0      # Carrega valor das unidades 
ADDi R0, $1     # Soma com constante 1
CEQi R0, $10    # Compara com a constante 10 para verificar o "vai 1"
JEQ @DEZ_SEG      # SEG == 10?  
STR R0, @0      # Armazena valor incrementado
STR R0, @288    # Carrega HEX0 com novo valor   
RET

DEZ_SEG:
LDI R0, $0
STR R0, @0
STR R0, @288    # Carrega HEX0 com 0
LDR R0, @1
ADDi R0, $1     # Soma com constante 1
CEQi R0, $1     # Compara com a constante 10 para verificar o "vai 1"
JEQ @MINUTOS    # DEZ_SEG == 6? 
STR R0, @1      # Armazena valor incrementado
STR R0, @289    # Carrega HEX1 com novo valor 
RET

MINUTOS:
LDI R0, $0
STR R0, @1
STR R0, @289    # Carrega HEX1 com 0
LDR R0, @2
ADDi R0, $1     # Soma com constante 1
CEQi R0, $10    # Compara com a constante 10 para verificar o "vai 1"
JEQ @DEZ_MIN    # MIN == 10? 
STR R0, @2      # Armazena valor incrementado
STR R0, @290    # Carrega HEX2 com novo valor 
RET

DEZ_MIN:
LDI R0, $0
STR R0, @2      
STR R0, @290    # Carrega HEX2 com 0
LDR R0, @3
ADDi R0, $1     # Soma com constante 1
CEQi R0, $1     # Compara com a constante 10 para verificar o "vai 1"
JEQ @HORAS      # DEZ_MIN == 6? 
STR R0, @3      # Armazena valor incrementado
STR R0, @291    # Carrega HEX3 com novo valor 
RET

HORAS:
LDR R0, @9
ADDi R0, $1     # SOMA_HORAS += 1
STR R0, @9
CEQ R0, @10     # Se SOMA_HORAS == Limite: 
JEQ @RESET_2    # ....Reseta tudo
LDI R0, $0
STR R0, @3
STR R0, @291    # Carrega HEX3 com 0
LDR R0, @4
ADDi R0, $1     # Soma com constante 1
CEQi R0, $10    # Compara com a constante 10 para verificar o "vai 1"
JEQ @DEZ_HORAS  # Se for 10, pula para a casa das centenas de milhares. Sen찾o, atualiza o HEX4 com o pr처ximo valor 
STR R0, @4      # Armazena valor incrementado
STR R0, @292    # Carrega HEX4 com novo valor 
RET

DEZ_HORAS:
LDI R0, $0
STR R0, @4
STR R0, @292    # Carrega HEX4 com 0
LDR R0, @5
ADDi R0, $1     # Soma com constante 1
STR R0, @5      # Armazena valor incrementado
STR R0, @293    # Carrega HEX5 com novo valor
RET

# ROTINA DE TROCA HORARIO ---------------------------------------

MUDA_HORA:
LDR R0, @8          # R0 = Indicador de Modo
CEQi R0, $0         # Se Modo = 24 horas:
JEQ @PRE_24H_AMPM   # .... 24 horas ===> AM/PM
#                   # .... AM/PM ===> 24 horas


# MUDA DE MODO: AM/PM ===> 24 HORAS
PRE_AMPM_24H:
LDR R0, @9
CLT R0, @12     # Se SOMA_HORAS < 12
JLT @AMPM_24H   # .... Ignora ajuste
LDR R0, @9
ADDi R0, $12    # SOMA_HORAS += 12
STR R0, @9

# Criei essas labels para facilitar saber onde acontece cada coisa
ATUALIZA_DISP_1:
LDR R0, @9
STR R0, @22     # Auxiliar para atualizar displays (M[22] = SOMA_HORAS)
LDI R0, $0
STR R0, @4      # ZERA horas
STR R0, @5      # ZERA dezenas_horas

LOOP_DISP_1:
LDR R0, @22
CLT R0, $10     # SOMA_HORAS < 10 ?
JLT @END_LOOP_DISP_1
SUBi R0, $10    #
STR R0, @22     # SOMA_HORAS -= 10
LDR R0, @5
ADDi R0, $1     # DEZ_HORAS += 1
STR R0, @5
JMP @LOOP_DISP_1

END_LOOP_DISP_1:
LDR R0, @22
STR R0, @4      # HORAS = Resto de SOMA_HORAS
STR R0, @292    # HEX 4 = Resto de SOMA_HORAS
LDR R0, @5
STR R0, @293    # HEX 5 = DEZ_HORAS

AMPM_24H:
LDI R0, $0
STR R0, @8      # Modo: 24 Horas
LDI R0, $2
STR R0, @6      # LIMITE de MEM[DezenasHoras] == 2
LDI R0, $4
STR R0, @7      # LIMITE de MEM[DezHoras] == 4
LDI R0, $23
STR R0, @10     # Limite horas
RET


# MUDA DE MODO: 24 HORAS ===> AM/PM
PRE_24H_AMPM:
LDR R0, @9
CLT R0, @12     # Se SOMA_HORAS < 12
JLT @24H_AMPM   # .... Ignora ajuste
LDR R0, @9
SUBi R0, $12    # SOMA_HORAS -= 12
STR R0, @9

# Criei essas labels para facilitar saber onde acontece cada coisa
ATUALIZA_DISP_2:
LDR R0, @9
STR R0, @22     # Auxiliar para atualizar displays (M[22] = SOMA_HORAS)
LDI R0, $0
STR R0, @4      # ZERA horas
STR R0, @5      # ZERA dezenas_horas

LOOP_DISP_2:
LDR R0, @22
CLT R0, $10     # SOMA_HORAS < 10 ?
JLT @END_LOOP_DISP_2
SUBi R0, $10    #
STR R0, @22     # SOMA_HORAS -= 10
LDR R0, @5
ADDi R0, $1     # DEZ_HORAS += 1
STR R0, @5
JMP @LOOP_DISP_2

END_LOOP_DISP_2:
LDR R0, @22
STR R0, @4      # HORAS = Resto de SOMA_HORAS
STR R0, @292    # HEX 4 = Resto de SOMA_HORAS
LDR R0, @5
STR R0, @293    # HEX 5 = DEZ_HORAS

24H_AMPM:
LDI R0, $1
STR R0, @8      # Modo: AM/PM
STR R0, @6      # LIMITE de MEM[DezenasHoras] == 1
LDI R0, $2
STR R0, @7      # LIMITE de MEM[DezHoras] == 2
LDI R0, $11
STR R0, @10     # Limite horas
RET


# ROTINA DE RESET -----------------------------------------------
RESET:
JMP @PRE_SETUP  # Se foi pressionado, entra na subrotina de reset

# RESET, porem sem deletar o PRE_SETUP (So limpa valores)
# Utilizado qnd bater o limite do Relogio 12 ou 24 horas
RESET_2:
LDR R0, @11
CEQi R0, $1     # Se Ciclo PM:
JEQ @178        #                       (C) -->
LDI R0, $1
STR R0, @11     # Ciclo AM => Ciclo PM
JMP @SETUP      # Zera tudo
LDI R0, $0      #                       <-- (C) 
STR R0, @9      # Zera SOMA_HORAS
LDI R0, $0
STR R0, @11     # Ciclo PM => Ciclo AM
JMP @SETUP      # Zera tudo