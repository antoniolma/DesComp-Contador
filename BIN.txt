tmp(0) := x"4" & '0' & x"00";	-- LDI $0			#Carrega o acumulador com o valor 0
tmp(1) := x"5" & '0' & x"0A";	-- STA @10     	#Limpa LIMITE (unidades)
tmp(2) := x"5" & '0' & x"0B";	-- STA @11     	#" LIMITE (dezenas)
tmp(3) := x"5" & '0' & x"0C";	-- STA @12     	#" LIMITE (centenas)
tmp(4) := x"5" & '0' & x"0D";	-- STA @13     	#" LIMITE (milhares)
tmp(5) := x"5" & '0' & x"0E";	-- STA @14     	#" LIMITE (dezenas de m.)
tmp(6) := x"5" & '0' & x"0F";	-- STA @15     	#" LIMITE (centenas de m.)
tmp(7) := x"5" & '0' & x"10";	-- STA @16     	#" LIMITE Contagem total
tmp(8) := x"5" & '0' & x"11";	-- STA @17     	#" Posicao para limite
tmp(9) := x"5" & '1' & x"FF";	-- STA @511		#" Leitura KEY0
tmp(10) := x"5" & '1' & x"FE";	-- STA @510		#" Leitura KEY1
tmp(11) := x"5" & '1' & x"20";	-- STA @288		#" HEX0
tmp(12) := x"5" & '1' & x"21";	-- STA @289		#" HEX1
tmp(13) := x"5" & '1' & x"22";	-- STA @290		#" HEX2
tmp(14) := x"5" & '1' & x"23";	-- STA @291		#" HEX3
tmp(15) := x"5" & '1' & x"24";	-- STA @292		#" HEX4
tmp(16) := x"5" & '1' & x"25";	-- STA @293		#" HEX5
tmp(17) := x"5" & '1' & x"00";	-- STA @256		#" LDR0 ~ LDR7
tmp(18) := x"5" & '1' & x"01";	-- STA @257		#" LDR8 
tmp(19) := x"5" & '1' & x"02";	-- STA @258		#" LDR9
tmp(20) := x"5" & '0' & x"00";	-- STA @0			#" MEM[0] (unidades)
tmp(21) := x"5" & '0' & x"01";	-- STA @1			#" MEM[1] (dezenas)
tmp(22) := x"5" & '0' & x"02";	-- STA @2			#" MEM[2] (centenas)
tmp(23) := x"5" & '0' & x"03";	-- STA @3			#" MEM[3] (milhares)
tmp(24) := x"5" & '0' & x"04";	-- STA @4			#" MEM[4] (dezenas de m.)
tmp(25) := x"5" & '0' & x"05";	-- STA @5			#" MEM[5] (centenas de m.)
tmp(26) := x"5" & '0' & x"12";	-- STA @18     	# Constante 0
tmp(27) := x"4" & '0' & x"01";	-- LDI $1
tmp(28) := x"5" & '0' & x"13";	-- STA @19     	# Constante 1
tmp(29) := x"4" & '0' & x"0A";	-- LDI $10
tmp(30) := x"5" & '0' & x"14";	-- STA @20     	# Constante 10
tmp(31) := x"4" & '0' & x"00";	-- LDI $0      
tmp(32) := x"5" & '0' & x"15";	-- STA @21     	# Flag e inibir contagem
tmp(33) := x"5" & '0' & x"06";	-- STA @6      	#" Contagem total
tmp(34) := x"5" & '0' & x"07";	-- STA @7      	#" Posicao contagem
tmp(35) := x"0" & '0' & x"00";	-- NOP         	# INICIO LOOP PRINCIPAL ----------------------------------------- 
tmp(36) := x"1" & '1' & x"60";	-- LDA @352
tmp(37) := x"8" & '0' & x"12";	-- CEQ @18     
tmp(38) := x"7" & '0' & x"29";	-- JEQ @41     	# Se não foi pressionado, permanece no loop *************                   
tmp(39) := x"9" & '0' & x"2A";	-- JSR @42     	# Se foi pressionado, entra na subrotina de incremento  *************
tmp(40) := x"0" & '0' & x"00";	-- NOP
tmp(41) := x"6" & '0' & x"68";	-- JMP @104     	# *************
tmp(42) := x"5" & '1' & x"FF";	-- STA @511
tmp(43) := x"1" & '0' & x"00";	-- LDA @0      	# Carrega valor das unidades 
tmp(44) := x"2" & '0' & x"13";	-- SOMA @19    	# Soma com constante 1
tmp(45) := x"8" & '0' & x"14";	-- CEQ @20     	# Compara com a constante 10 para verificar o "vai 1"
tmp(46) := x"7" & '0' & x"32";	-- JEQ @50     	# Se for 10, pula para a casa das dezenas. Senão, atualiza o HEX0 com o próximo valor *************
tmp(47) := x"5" & '0' & x"00";	-- STA @0      	# Armazena valor incrementado
tmp(48) := x"5" & '1' & x"20";	-- STA @288    	# Carrega HEX0 com novo valor   
tmp(49) := x"A" & '0' & x"00";	-- RET
tmp(50) := x"4" & '0' & x"00";	-- LDI $0
tmp(51) := x"5" & '0' & x"00";	-- STA @0
tmp(52) := x"5" & '1' & x"20";	-- STA @288    	# Carrega HEX0 com 0
tmp(53) := x"1" & '0' & x"01";	-- LDA @1
tmp(54) := x"2" & '0' & x"13";	-- SOMA @19    	# Soma com constante 1
tmp(55) := x"8" & '0' & x"14";	-- CEQ @20     	# Compara com a constante 10 para verificar o "vai 1"
tmp(56) := x"7" & '0' & x"3C";	-- JEQ @60     	# Se for 10, pula para a casa das centenas. Senão, atualiza o HEX1 com o próximo valor *************
tmp(57) := x"5" & '0' & x"01";	-- STA @1      	# Armazena valor incrementado
tmp(58) := x"5" & '1' & x"21";	-- STA @289    	# Carrega HEX1 com novo valor  
tmp(59) := x"A" & '0' & x"00";	-- RET
tmp(60) := x"4" & '0' & x"00";	-- LDI $0
tmp(61) := x"5" & '0' & x"01";	-- STA @1
tmp(62) := x"5" & '1' & x"21";	-- STA @289    	# Carrega HEX1 com 0
tmp(63) := x"1" & '0' & x"02";	-- LDA @2
tmp(64) := x"2" & '0' & x"13";	-- SOMA @19    	# Soma com constante 1
tmp(65) := x"8" & '0' & x"14";	-- CEQ @20     	# Compara com a constante 10 para verificar o "vai 1"
tmp(66) := x"7" & '0' & x"46";	-- JEQ @70     	# Se for 10, pula para a casa das unidades de milhares. Senão, atualiza o HEX2 com o próximo valor *************
tmp(67) := x"5" & '0' & x"02";	-- STA @2      	# Armazena valor incrementado
tmp(68) := x"5" & '1' & x"22";	-- STA @290    	# Carrega HEX2 com novo valor 
tmp(69) := x"A" & '0' & x"00";	-- RET
tmp(70) := x"4" & '0' & x"00";	-- LDI $0
tmp(71) := x"5" & '0' & x"02";	-- STA @2      
tmp(72) := x"5" & '1' & x"22";	-- STA @290    	# Carrega HEX2 com 0
tmp(73) := x"1" & '0' & x"03";	-- LDA @3
tmp(74) := x"2" & '0' & x"13";	-- SOMA @19    	# Soma com constante 1
tmp(75) := x"8" & '0' & x"14";	-- CEQ @20     	# Compara com a constante 10 para verificar o "vai 1"
tmp(76) := x"7" & '0' & x"50";	-- JEQ @80     	# Se for 10, pula para a casa das dezenas de milhares. Senão, atualiza o HEX3 com o próximo valor *************
tmp(77) := x"5" & '0' & x"03";	-- STA @3      	# Armazena valor incrementado
tmp(78) := x"5" & '1' & x"23";	-- STA @291    	# Carrega HEX3 com novo valor 
tmp(79) := x"A" & '0' & x"00";	-- RET
tmp(80) := x"4" & '0' & x"00";	-- LDI $0
tmp(81) := x"5" & '0' & x"03";	-- STA @3      
tmp(82) := x"5" & '1' & x"23";	-- STA @291    	# Carrega HEX3 com 0
tmp(83) := x"1" & '0' & x"04";	-- LDA @4
tmp(84) := x"2" & '0' & x"13";	-- SOMA @19    	# Soma com constante 1
tmp(85) := x"8" & '0' & x"14";	-- CEQ @20     	# Compara com a constante 10 para verificar o "vai 1"
tmp(86) := x"7" & '0' & x"5A";	-- JEQ @90     	# Se for 10, pula para a casa das centenas de milhares. Senão, atualiza o HEX4 com o próximo valor *************
tmp(87) := x"5" & '0' & x"04";	-- STA @4      	# Armazena valor incrementado
tmp(88) := x"5" & '1' & x"24";	-- STA @292    	# Carrega HEX4 com novo valor 
tmp(89) := x"A" & '0' & x"00";	-- RET
tmp(90) := x"4" & '0' & x"00";	-- LDI $0
tmp(91) := x"5" & '0' & x"04";	-- STA @4
tmp(92) := x"5" & '1' & x"24";	-- STA @292    	# Carrega HEX4 com 0
tmp(93) := x"1" & '0' & x"05";	-- LDA @5
tmp(94) := x"2" & '0' & x"13";	-- SOMA @19    	# Soma com constante 1
tmp(95) := x"8" & '0' & x"14";	-- CEQ @20     	# Compara com a constante 10 para verificar o "vai 1"
tmp(96) := x"7" & '0' & x"64";	-- JEQ @100    	# Se for 10, ativa LED de OVERFLOW e flag de inibir contagem. Senão, atualiza o HEX5 com o próximo valor *************
tmp(97) := x"5" & '0' & x"05";	-- STA @5      	# Armazena valor incrementado
tmp(98) := x"5" & '1' & x"25";	-- STA @293    	# Carrega HEX5 com novo valor 
tmp(99) := x"A" & '0' & x"00";	-- RET
tmp(100) := x"4" & '0' & x"01";	-- LDI $1
tmp(101) := x"5" & '1' & x"02";	-- STA @258    	# Ativando LED de OVERFLOW (LDR9)
tmp(102) := x"5" & '0' & x"15";	-- STA @21
tmp(103) := x"A" & '0' & x"00";	-- RET
tmp(104) := x"1" & '1' & x"64";	-- LDA @356    	# LEITURA DO FPGA_RESET
tmp(105) := x"8" & '0' & x"12";	-- CEQ @18     
tmp(106) := x"7" & '0' & x"80";	-- JEQ @128    	# Se não foi pressionado, permanece no loop e volta para o inicio *************                   
tmp(107) := x"9" & '0' & x"6E";	-- JSR @110    	# Se foi pressionado, entra na subrotina de reset  *************
tmp(108) := x"0" & '0' & x"00";	-- NOP
tmp(109) := x"6" & '0' & x"80";	-- JMP @128
tmp(110) := x"5" & '1' & x"FE";	-- STA @510
tmp(111) := x"4" & '0' & x"00";	-- LDI $0
tmp(112) := x"5" & '0' & x"00";	-- STA @0
tmp(113) := x"5" & '0' & x"01";	-- STA @1
tmp(114) := x"5" & '0' & x"02";	-- STA @2
tmp(115) := x"5" & '0' & x"03";	-- STA @3
tmp(116) := x"5" & '0' & x"04";	-- STA @4
tmp(117) := x"5" & '0' & x"05";	-- STA @5
tmp(118) := x"5" & '1' & x"20";	-- STA @288	
tmp(119) := x"5" & '1' & x"21";	-- STA @289	
tmp(120) := x"5" & '1' & x"22";	-- STA @290	
tmp(121) := x"5" & '1' & x"23";	-- STA @291	
tmp(122) := x"5" & '1' & x"24";	-- STA @292	
tmp(123) := x"5" & '1' & x"25";	-- STA @293	
tmp(124) := x"5" & '1' & x"00";	-- STA @256	
tmp(125) := x"5" & '1' & x"01";	-- STA @257	 
tmp(126) := x"5" & '1' & x"02";	-- STA @258	
tmp(127) := x"A" & '0' & x"00";	-- RET 
tmp(128) := x"8" & '1' & x"61";	-- CEQ @353    	#Le o estado do KEY1 
tmp(129) := x"7" & '0' & x"84";	-- JEQ @132    	#....Desvia para MODIFICAR LIMITE (se apertado)                     ->(C)
tmp(130) := x"9" & '0' & x"C2";	-- JSR @194    	#....Verificar se o limite de contagem foi alcançado                (D)<- chegada | ->(E) saida
tmp(131) := x"6" & '0' & x"23";	-- JMP @35     	# Endereço de inicio do LOOP
tmp(132) := x"4" & '0' & x"00";	-- LDI $0      	#   -> POSICAO 0 <-----------------------------------               (C)<-
tmp(133) := x"C" & '0' & x"07";	-- CGT @7      	#Se POSICAO CONTAGEM > 0
tmp(134) := x"D" & '0' & x"8F";	-- JGT @143    	#Proximo                                                            ->(G1)
tmp(135) := x"1" & '1' & x"40";	-- LDA @320    	#Carrega: SW0 ~ SW7
tmp(136) := x"5" & '0' & x"0A";	-- STA @10     	#LIMITE HEX0 = Valor SW0 ~ SW7
tmp(137) := x"4" & '0' & x"01";	-- LDI $1
tmp(138) := x"5" & '1' & x"00";	-- STA @256    	#Liga os leds das posicoes configuradas
tmp(139) := x"4" & '0' & x"01";	-- LDI $1
tmp(140) := x"2" & '0' & x"07";	-- SOMA @7     	#Proxima posicao
tmp(141) := x"5" & '0' & x"07";	-- STA @7      	#Salva proxima posicao
tmp(142) := x"6" & '0' & x"82";	-- JMP @130    	#Volta                                                              ->(D)
tmp(143) := x"4" & '0' & x"01";	-- LDI $1      	#   -> POSICAO 1 <-----------------------------------               (G1)<-
tmp(144) := x"C" & '0' & x"07";	-- CGT @7      	#Se POSICAO CONTAGEM > 1
tmp(145) := x"D" & '0' & x"9A";	-- JGT @154    	#Proximo                                                            ->(G2)
tmp(146) := x"1" & '1' & x"40";	-- LDA @320    	#Carrega: SW0 ~ SW7
tmp(147) := x"5" & '0' & x"0B";	-- STA @11     	#LIMITE HEX1 = Valor SW0 ~ SW7
tmp(148) := x"4" & '0' & x"03";	-- LDI $3
tmp(149) := x"5" & '1' & x"00";	-- STA @256    	#Liga os leds das posicoes configuradas
tmp(150) := x"4" & '0' & x"01";	-- LDI $1
tmp(151) := x"2" & '0' & x"07";	-- SOMA @7     	#Proxima posicao
tmp(152) := x"5" & '0' & x"07";	-- STA @7      	#Salva proxima posicao
tmp(153) := x"6" & '0' & x"82";	-- JMP @130    	#Volta                                                              ->(D)
tmp(154) := x"4" & '0' & x"02";	-- LDI $2      	#   -> POSICAO 2 <----------------------------------                (G2)<-
tmp(155) := x"C" & '0' & x"07";	-- CGT @7      	#Se POSICAO CONTAGEM > 2
tmp(156) := x"D" & '0' & x"A5";	-- JGT @165    	#Proximo                                                            ->(G3)
tmp(157) := x"1" & '1' & x"40";	-- LDA @320    	#Carrega: SW0 ~ SW7
tmp(158) := x"5" & '0' & x"0C";	-- STA @12     	#LIMITE HEX2 = Valor SW0 ~ SW7
tmp(159) := x"4" & '0' & x"07";	-- LDI $7
tmp(160) := x"5" & '1' & x"00";	-- STA @256    	#Liga os leds das posicoes configuradas
tmp(161) := x"4" & '0' & x"01";	-- LDI $1
tmp(162) := x"2" & '0' & x"07";	-- SOMA @7     	#Proxima posicao
tmp(163) := x"5" & '0' & x"07";	-- STA @7      	#Salva proxima posicao
tmp(164) := x"6" & '0' & x"82";	-- JMP @130    	#Volta                                                              ->(D)
tmp(165) := x"4" & '0' & x"03";	-- LDI $3      	#   -> POSICAO 3 <----------------------------------                (G3)<-
tmp(166) := x"C" & '0' & x"07";	-- CGT @7      	#Se POSICAO CONTAGEM > 3
tmp(167) := x"D" & '0' & x"B0";	-- JGT @176    	#Proximo                                                            ->(G4)
tmp(168) := x"1" & '1' & x"40";	-- LDA @320    	#Carrega: SW0 ~ SW7
tmp(169) := x"5" & '0' & x"0D";	-- STA @13     	#LIMITE HEX3 = Valor SW0 ~ SW7
tmp(170) := x"4" & '0' & x"0F";	-- LDI $15
tmp(171) := x"5" & '1' & x"00";	-- STA @256    	#Liga os leds das posicoes configuradas
tmp(172) := x"4" & '0' & x"01";	-- LDI $1
tmp(173) := x"2" & '0' & x"07";	-- SOMA @7     	#Proxima posicao
tmp(174) := x"5" & '0' & x"07";	-- STA @7      	#Salva proxima posicao
tmp(175) := x"6" & '0' & x"82";	-- JMP @130    	#Volta                                                              ->(D)
tmp(176) := x"4" & '0' & x"04";	-- LDI $4      	#   -> POSICAO 4 <----------------------------------                (G4)<-
tmp(177) := x"C" & '0' & x"07";	-- CGT @7      	#Se POSICAO CONTAGEM > 4
tmp(178) := x"D" & '0' & x"BB";	-- JGT @187    	#Proximo                                                            ->(G5)
tmp(179) := x"1" & '1' & x"40";	-- LDA @320    	#Carrega: SW0 ~ SW7
tmp(180) := x"5" & '0' & x"0E";	-- STA @14     	#LIMITE HEX4 = Valor SW0 ~ SW7
tmp(181) := x"4" & '0' & x"1F";	-- LDI $31
tmp(182) := x"5" & '1' & x"00";	-- STA @256    	#Liga os leds das posicoes configuradas
tmp(183) := x"4" & '0' & x"01";	-- LDI $1
tmp(184) := x"2" & '0' & x"07";	-- SOMA @7     	#Proxima posicao
tmp(185) := x"5" & '0' & x"07";	-- STA @7      	#Salva proxima posicao
tmp(186) := x"6" & '0' & x"82";	-- JMP @130    	#Volta                                                              ->(D)
tmp(187) := x"1" & '1' & x"40";	-- LDA @320    	#   -> POSICAO 5 <----------------------------------                (G5)<-
tmp(188) := x"5" & '0' & x"0F";	-- STA @15     	#LIMITE HEX5 = Valor SW0 ~ SW7
tmp(189) := x"4" & '0' & x"3F";	-- LDI $63
tmp(190) := x"5" & '1' & x"00";	-- STA @256    	#Liga os leds das posicoes configuradas
tmp(191) := x"4" & '0' & x"00";	-- LDI $0
tmp(192) := x"5" & '0' & x"07";	-- STA @7      	#Reseta a posicao
tmp(193) := x"6" & '0' & x"82";	-- JMP @130    	#Volta                                                              ->(D)
tmp(194) := x"1" & '0' & x"0F";	-- LDA @15     	# => LIMITE POS. 5 <===============================                 (E)<-
tmp(195) := x"8" & '0' & x"05";	-- CEQ @5      	#Se HEX5 no limite
tmp(196) := x"7" & '0' & x"C6";	-- JEQ @198    	#Verifica o Proximo                                                 ->(F1)
tmp(197) := x"A" & '0' & x"00";	-- RET
tmp(198) := x"1" & '0' & x"0E";	-- LDA @14     	# => LIMITE POS. 4 <===============================                 (F1)<-
tmp(199) := x"8" & '0' & x"04";	-- CEQ @4      	#Se HEX4 no limite
tmp(200) := x"7" & '0' & x"CA";	-- JEQ @202     	#Verifica o Proximo                                                 ->(F2)
tmp(201) := x"A" & '0' & x"00";	-- RET
tmp(202) := x"1" & '0' & x"0D";	-- LDA @13     	# => LIMITE POS. 3 <===============================                 (F2)<-
tmp(203) := x"8" & '0' & x"03";	-- CEQ @3      	#Se HEX3 no limite
tmp(204) := x"7" & '0' & x"CE";	-- JEQ @206    	#Verifica o Proximo                                                 ->(F3)
tmp(205) := x"A" & '0' & x"00";	-- RET
tmp(206) := x"1" & '0' & x"0C";	-- LDA @12     	# => LIMITE POS. 2 <===============================                 (F3)<-
tmp(207) := x"8" & '0' & x"02";	-- CEQ @2      	#Se HEX2 no limite
tmp(208) := x"7" & '0' & x"D2";	-- JEQ @210     	#Verifica o Proximo                                                 ->(F4)
tmp(209) := x"A" & '0' & x"00";	-- RET
tmp(210) := x"1" & '0' & x"0B";	-- LDA @11     	# => LIMITE POS. 1 <===============================                 (F4)<-
tmp(211) := x"8" & '0' & x"01";	-- CEQ @1      	#Se HEX1 no limite
tmp(212) := x"7" & '0' & x"D6";	-- JEQ @214    	#Verifica o Proximo                                                 ->(F5)
tmp(213) := x"A" & '0' & x"00";	-- RET
tmp(214) := x"1" & '0' & x"0A";	-- LDA @10     	# => LIMITE POS. 0 <===============================                 (F5)<-
tmp(215) := x"C" & '0' & x"00";	-- CGT @0      	#Se HEX0 PASSOU e outros no limite
tmp(216) := x"D" & '0' & x"DA";	-- JGT @218    	#Pula para correcao de valor                                        ->(F6)
tmp(217) := x"A" & '0' & x"00";	-- RET
tmp(218) := x"1" & '0' & x"0A";	-- LDA @10     	#CORRIGE VALOR DE HEX0                                              (F6)<-
tmp(219) := x"5" & '0' & x"00";	-- STA @0      	#HEX0 volta para o limite
tmp(220) := x"A" & '0' & x"00";	-- RET
